#!/usr/bin/env ruby

require "bundler/setup"
require "librato/memcached"

opts = Trollop::options do
  opt :hosts, "Comma-delimited list of Memcached servers/ports [MEMCACHED_SERVERS]",
    :type => :string,
    :default => ENV["MEMCACHED_SERVERS"]

  opt :email, "Librato API user's email address [LIBRATO_EMAIL]",
    :type => :string,
    :default => ENV["LIBRATO_EMAIL"]

  opt :token, "Librato API token [LIBRATO_TOKEN]",
    :type => :string,
    :default => ENV["LIBRATO_TOKEN"]

  opt :prefix, "Prefix for metrics sent to Librato",
    :type => :string,
    :default => "memcached."

  opt :floor_in_secs, "floor() measure times to this interval",
    :type => :int
end

mt = Time.now.tv_sec
if opts[:floor_in_secs]
  mt = (mt / opts[:floor_in_secs]) * opts[:floor_in_secs]
end

servers = opts[:hosts].split(",")

begin
  stats = Dalli::Client.new(servers).stats
rescue => err
  $stderr.puts "Failed to read stats from memcached: #{err.message}"
  exit 1
end

def server_name(n)
  n.split(":").first
end

def metric_name(n, opts)
  ("%s%s" % [opts[:prefix], n]).to_sym
end

Librato::Metrics.authenticate opts[:email], opts[:token]

q = Librato::Metrics::Queue.new

stats.each_pair do |stat, values|
  if values.length != servers.length
    $stderr.puts "Unable to grab stat #{stat} for each server"
    exit 1
  end

  # Skip static stats
  if %w{pointer_size time version pid}.include?(stat.to_s)
    next
  end

  servers.each_with_index do |srv, i|
    gauges = [:curr_connections, :limit_maxbytes, :bytes,
              :connection_structures, :curr_items,
              :rusage_user, :rusage_system, :threads]

    if gauges.include?(stat.to_sym)
      q.add metric_name(stat, opts) => {
        :type => :gauge,
        :value => values[i],
        :source => server_name(srv),
        :measure_time => mt
      }
    else
      q.add metric_name(stat, opts) => {
        :type => :counter,
        :value => values[i],
        :source => server_name(srv),
        :measure_time => mt
      }
    end
  end
end

begin
  q.submit
rescue => err
  $stderr.puts "Failed to submit stats to Librato Metrics: %s" %
    [err.message]
  exit 1
end

# Local Variables:
# mode: ruby
# End:
